//Ques 1. WAP to remove Duplicates from a String.(Take any String ex with duplicates character)

import java.util.*;
public class RemoveDuplicates {
    public static void main(String[] args)
    {   
        String str = "aaabaababbccbccd";
        char s[]=str.toCharArray();
        System.out.println("String with Duplicate characters : "+str);
        String ans="";
        int i,j;
        for(i=0;i<s.length;i++){
            for(j=0;j<i;j++){
                if(s[i]==s[j]){
                    break;    
                }
            }
            if(j==i){          
                ans+=s[i];      
            }                  
        }
        System.out.println();
        System.out.print("String without Duplicate characters : "+ans);
    }
}

//Output

/*
String with Duplicate characters : aaabaababbccbccd
String without Duplicate characters : abcd
*/




//Ques 2. WAP to print Duplicates characters from the String.

import java.util.*;
public class DuplicateCharacters {  
    public static void main(String[] args) {  
       String str = "aaabaababbccbccd";
       System.out.println("Given string: "+str);
       int count;   
       char s[] = str.toCharArray();  
         
       System.out.print("Duplicate characters in a given string: ");    
       for(int i = 0; i <s.length; i++) {  
           count = 1;  
           for(int j = i+1; j <s.length; j++) {  
               if(s[i] == s[j] && s[i] != ' ') {  
                   count++;   
                   s[j] = '0';  
               }  
           }  
           if(count > 1 && s[i] != '0')  
               System.out.print(s[i]);  
       }  
   }  
}  




//Output

/*
Given string: aaabaababbccbccd
Duplicate characters in a given string: abc
*/




//Ques 3. WAP to check if “2552” is palindrome or not.

import java.util.*;

public class CheckPalindrome
{
	static int reverseDigits(int n)
	{
		int reverse_num = 0;
		while (n > 0) {
			reverse_num = reverse_num * 10 + n % 10;
			n = n / 10;
		}
		return reverse_num;
	}
	
	static int isPalindrome(int n)
	{
		int reverse_num = reverseDigits(n);
		if (reverse_num == n)
			return 1;
		else
			return 0;
	}
	public static void main(String []args)
	{
		int n = 2552;
		System.out.println( n  + (isPalindrome(n) == 1 ? " is a Palindrome number " : " is not a Palindrome number "));

	}

}

//Output

/*

2552 is a Palindrome number 

*/




//Ques 4. WAP to count the number of consonants, vowels, special characters in a String.

import java.io.*;

public class CVS {
	static void countCharacterType(String str)
	{
		int vowels = 0, consonant = 0, specialChar = 0,
			digit = 0;
		for (int i = 0; i < str.length(); i++) {
			
			char ch = str.charAt(i);
	
			if ( (ch >= 'a' && ch <= 'z') ||
				(ch >= 'A' && ch <= 'Z') ) {
				ch = Character.toLowerCase(ch);
	
				if (ch == 'a' || ch == 'e' || ch == 'i' ||
					ch == 'o' || ch == 'u')
					vowels++;
				else
					consonant++;
			}
			else if (ch >= '0' && ch <= '9')
				digit++;
			else
				specialChar++;
		}
		
		System.out.println("Vowels: " + vowels);
		System.out.println("Consonant: " + consonant);
		System.out.println("Digit: " + digit);
		System.out.println("Special Character: " + specialChar);
	}
	static public void main (String[] args)
	{
		String str = "in@456hjeuron$*";
		
		countCharacterType(str);
	}
}

//Output

/*

Vowels: 4
Consonant: 5
Digit: 3
Special Character: 3

*/



//Ques 5. WAP to implement Anagram Checking least inbuilt methods being used.

import java.io.*;
import java.util.Arrays;
import java.util.Collections;

public class Anagram {
	static boolean areAnagram(char[] str1, char[] str2)
	{
		if (str1.length != str2.length)
			return false;

		Arrays.sort(str1);
		Arrays.sort(str2);
		for (int i = 0; i < str1.length; i++)
			if (str1[i] != str2[i])
				return false;

		return true;
	}
	public static void main(String args[])
	{
		char str1[] = { 'l', 'i', 's', 't','e','n' };
		char str2[] = { 's', 'i', 'l','e','n','t'};
	
		if (areAnagram(str1, str2))
			System.out.println("The two strings are"
							+ " anagram of each other");
		else
			System.out.println("The two strings are not"
							+ " anagram of each other");
	}
}

//Output

/*

The two strings are anagram of each other

*/


//Ques 6. WAP to implement Pangram Checking with least inbuilt methods being used.

import java.io.*;
public class Pangram 
{
	public static boolean checkPangram(String str)
	{
		boolean[] mark = new boolean[26];

		int index = 0;
		for (int i = 0; i < str.length(); i++) 
		{
			if ('A' <= str.charAt(i) && str.charAt(i) <= 'Z')
				index = str.charAt(i) - 'A';
			else if ('a' <= str.charAt(i) && str.charAt(i) <= 'z')
				index = str.charAt(i) - 'a';
			else
				continue;
			mark[index] = true;
		}
		for (int i = 0; i <= 25; i++)
			if (mark[i] == false)
				return (false);

		return (true);
	}


	public static void main(String[] args)
	{
		String str = "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG";

		if (checkPangram(str) == true)
			System.out.print("'"+str + "'"+" is a Pangram.");
		else
			System.out.print("'"+str + "'"+" is not a Pangram.");
	}
}

//Output
/*

'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG' is a Pangram.

*/

